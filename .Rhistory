mutate(region = if_else(region == "Middle East and North Africa",
"North_Africa", region)) %>%
# Clean the names
janitor::clean_names() %>%
# Set up factor variables
## legal status
mutate(currentlegalstatus = factor(currentlegalstatus,
levels = c("NGO", "Bank", "NBFI",
"Credit Union/ Cooperative",
"Rural Bank")),
## Age
age = factor(age, levels = c("New", "Young", "Mature")),
## Region
region = factor(region, levels = c("North_Africa", "Africa"))) %>%
## Add the financial structure data
left_join(finstr, by = c("country", "year")) %>%
## Add a binary variable for the legal dummy- NGO vs Others
mutate(currentlegaldummy = case_when(currentlegalstatus == "NGO" ~ "NGO",
TRUE ~ "others"),
currentlegaldummy = factor(currentlegaldummy, levels = c("NGO", "others")),
legal_tradition = factor(legal_tradition,
levels = c("Common", "Civil", "Other"))) %>%
## Select required variables
select(mfiid, mfiname, year, country, currentlegaldummy, currentlegalstatus,
percent_of_female_borrowers, operational_self_sufficiency,
age, legal_tradition, region.x, asset_structure,
assets, kkm, education, pcrdbgdp, stmktcap, prbonds,
gdp_growth_annual, donations, donations_assets_ratio,
profit_margin, debt_to_equity_ratio, capital_asset_ratio,
deposits_to_total_assets, liabilities_and_equity,
operating_expense_assets, average_loan_balance_per_borrower,
gross_loan_portfolio_to_total_assets, net_fixed_assets) %>%
## Rename region
rename(region = region.x) %>%
group_by(country) %>%
mutate(kkm = replace_na(kkm, median(kkm, na.rm = TRUE)),
education = replace_na(education, median(education, na.rm = TRUE)),
prbonds = replace_na(prbonds, median(prbonds, na.rm = TRUE)),
pcrdbgdp = replace_na(pcrdbgdp, median(pcrdbgdp, na.rm = TRUE)),
stmktcap = replace_na(stmktcap, median(stmktcap, na.rm = TRUE))) %>%
ungroup() %>%
group_by(mfiid) %>%
mutate(asset_structure = replace_na(asset_structure, median(asset_structure, na.rm = TRUE)),
percent_of_female_borrowers = replace_na(percent_of_female_borrowers,
median(percent_of_female_borrowers, na.rm = TRUE)),
operational_self_sufficiency = replace_na(operational_self_sufficiency,
median(operational_self_sufficiency, na.rm = TRUE)),
assets = replace_na(assets, median(assets, na.rm = TRUE)),
donations = replace_na(donations, median(donations, na.rm = TRUE)),
donations_assets_ratio = replace_na(donations_assets_ratio,
median(donations_assets_ratio, na.rm = TRUE)),
profit_margin = replace_na(profit_margin, median(profit_margin, na.rm = TRUE)),
capital_asset_ratio = replace_na(capital_asset_ratio, median(capital_asset_ratio, na.rm = TRUE)),
debt_to_equity_ratio = replace_na(debt_to_equity_ratio, median(debt_to_equity_ratio, na.rm = TRUE)),
deposits_to_total_assets = replace_na(deposits_to_total_assets,
median(deposits_to_total_assets, na.rm = TRUE)),
liabilities_and_equity = replace_na(liabilities_and_equity,
median(liabilities_and_equity, na.rm = TRUE)),
operating_expense_assets = replace_na(operating_expense_assets,
median(operating_expense_assets, na.rm = TRUE)),
average_loan_balance_per_borrower = replace_na(average_loan_balance_per_borrower,
median(average_loan_balance_per_borrower, na.rm = TRUE)),
gross_loan_portfolio_to_total_assets = replace_na(gross_loan_portfolio_to_total_assets,
median(gross_loan_portfolio_to_total_assets, na.rm = TRUE)),
net_fixed_assets = replace_na(net_fixed_assets, median(net_fixed_assets, na.rm = TRUE))) %>%
ungroup() %>%
group_by(region) %>%
mutate(education = replace_na(education, median(education, na.rm = TRUE)),
kkm = replace_na(kkm, median(kkm, na.rm = TRUE)),
gdp_growth_annual = replace_na(gdp_growth_annual,
median(gdp_growth_annual, na.rm = TRUE))) %>%
ungroup() %>%
group_by(currentlegalstatus) %>%
mutate(assets = replace_na(assets, median(assets, na.rm = TRUE)),
percent_of_female_borrowers = replace_na(percent_of_female_borrowers,
median(percent_of_female_borrowers, na.rm = TRUE)),
operational_self_sufficiency = replace_na(operational_self_sufficiency,
median(operational_self_sufficiency, na.rm = TRUE)),
donations = replace_na(donations, median(donations, na.rm = TRUE)),
donations_assets_ratio = replace_na(donations_assets_ratio,
median(donations_assets_ratio, na.rm = TRUE)),
profit_margin = replace_na(profit_margin, median(profit_margin, na.rm = TRUE)),
capital_asset_ratio = replace_na(capital_asset_ratio, median(capital_asset_ratio, na.rm = TRUE)),
debt_to_equity_ratio = replace_na(debt_to_equity_ratio, median(debt_to_equity_ratio, na.rm = TRUE)),
deposits_to_total_assets = replace_na(deposits_to_total_assets, median(deposits_to_total_assets,
na.rm = TRUE)),
liabilities_and_equity = replace_na(liabilities_and_equity,
median(liabilities_and_equity, na.rm = TRUE)),
operating_expense_assets = replace_na(operating_expense_assets,
median(operating_expense_assets, na.rm = TRUE)),
average_loan_balance_per_borrower = replace_na(average_loan_balance_per_borrower,
median(average_loan_balance_per_borrower, na.rm = TRUE)),
gross_loan_portfolio_to_total_assets = replace_na(gross_loan_portfolio_to_total_assets,
median(gross_loan_portfolio_to_total_assets, na.rm = TRUE)),
net_fixed_assets = replace_na(net_fixed_assets, median(net_fixed_assets, na.rm = TRUE))) %>%
ungroup() %>%
mutate(dummy = if_else(currentlegaldummy == "NGO", 0, 1)) %>%
mutate(assets = log(assets + 1),
pcrdbgdp = log(pcrdbgdp + 1),
stmktcap = log(stmktcap + 1),
prbonds = log(prbonds + 1)) %>%
select(-asset_structure) %>%
add_count(mfiid, name = "count") %>%
mutate(currentlegalstatus = fct_recode(currentlegalstatus, Coop = "Credit Union/ Cooperative")) %>%
mutate(finsoc = case_when(operational_self_sufficiency >= 1 & percent_of_female_borrowers > 0.5 ~ "SS",
operational_self_sufficiency > 1 & percent_of_female_borrowers < 0.5 ~ "SF",
operational_self_sufficiency < 1 & percent_of_female_borrowers >= 0.5 ~ "FS",
TRUE ~ "FF")) %>%
mutate(finsoc = factor(finsoc, levels = c("FF", "SF", "FS", "SS"))) %>%
## replace negative donations with zero
mutate(donations = case_when(donations <= 0 ~ 1,
TRUE ~ donations + 1)) %>%
mutate(stmktcap = if_else(stmktcap == 0, 1, stmktcap + 1)) %>%
mutate(donations_assets_ratio = case_when(donations_assets_ratio <= 0 ~ 1,
TRUE ~ donations_assets_ratio + 1)) %>%
mutate(profit_margin = case_when(profit_margin < -50 ~ 51,
TRUE ~ profit_margin + 51))
## Write a csv for the data
my_data %>% write.csv(., "data.csv")
## Visualize missing data
#md.pattern(data)
## Amelia::missmap(data)
## MFIs with three (3) or more years of data
data3 <- my_data %>%
group_by(mfiid) %>%
filter(n() > 3)
data3 %>% write.csv(., "data3.csv")
## MFIs with three (3) or more years of data
data5 <- my_data %>%
group_by(mfiid) %>%
filter(n() > 5)
data5 %>% write.csv(., "data5.csv")
median_n <- function(x){median(x, na.rm = TRUE)}
theme_niwot <- function(){
theme_bw() +
theme(axis.text = element_text(size = 7),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 8),
axis.line.x = element_line(color="black"),
axis.line.y = element_line(color="black"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
plot.title = element_text(size = 10, vjust = 1, hjust = 0),
legend.text = element_text(size = 8),
legend.title = element_blank(),
legend.position = c(0.95, 0.15),
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "transparent",
size = 2, linetype = "blank"))
}
###########################################
#' ggplot Flat Violin
#' @export
#' @details Copy-pasted from https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R
#' somewhat hackish solution to:
#' https://twitter.com/EamonCaddigan/status/646759751242620928
#' based mostly on copy/pasting from ggplot2 geom_violin source:
#' https://github.com/hadley/ggplot2/blob/master/R/geom-violin.r
#' @examples:
#' ggplot(diamonds, aes(cut, carat)) +
#'   geom_flat_violin() +
#'   coord_flip()
#' @import ggplot2
geom_flat_violin <- function(mapping = NULL, data = NULL, stat = "ydensity",
position = "dodge", trim = TRUE, scale = "area",
show.legend = NA, inherit.aes = TRUE, ...) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomFlatViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
...
)
}
#' @rdname ggplot2-ggproto
#' @format NULL
#' @usage NULL
#' @export
GeomFlatViolin <-
ggproto("GeomFlatViolin", Geom,
setup_data = function(data, params) {
data$width <- data$width %||%
params$width %||% (resolution(data$x, FALSE) * 0.9)
# ymin, ymax, xmin, and xmax define the bounding rectangle for each group
data %>%
group_by(group) %>%
mutate(ymin = min(y),
ymax = max(y),
xmin = x,
xmax = x + width / 2)
},
draw_group = function(data, panel_scales, coord) {
# Find the points for the line to go all the way around
data <- transform(data, xminv = x,
xmaxv = x + violinwidth * (xmax - x))
# Make sure it's sorted properly to draw the outline
newdata <- rbind(plyr::arrange(transform(data, x = xminv), y),
plyr::arrange(transform(data, x = xmaxv), -y))
# Close the polygon: set first and last point the same
# Needed for coord_polar and such
newdata <- rbind(newdata, newdata[1,])
ggplot2:::ggname("geom_flat_violin", GeomPolygon$draw_panel(newdata, panel_scales, coord))
},
draw_key = draw_key_polygon,
default_aes = aes(weight = 1, colour = "grey20", fill = "white", size = 0.5,
alpha = NA, linetype = "solid"),
required_aes = c("x", "y")
)
"%||%" <- function(a, b) {
if (!is.null(a)) a else b
}
###########################################################
# plotting function
plotter <- function(data, x , y, z, xlabel, ylabel, title){
library(tidyverse)
library(ggthemes)
library(gghalves)
library(ggalt)
library(ggrepel)  # for annotations
library(viridis)  # for nice colors
library(broom)  # for cleaning up models
library(treemapify)  # for making area graphs
library(wesanderson)  # for nice colors
ggplot(data = data, mapping = aes(x = reorder({{x}}, {{y}}, median_n),
y = {{y}}, fill = {{z}})) +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.8, aes(fill = {{z}})) +
geom_half_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.1) +
scale_y_log10() + labs(y = ylabel, x = xlabel,
title = title) +
theme_niwot() +
theme(legend.position = "none") +
stat_summary(fun = mean, geom = "point",
size = 1, color = "red")}
##################################################
second_plotter <- function(data, x , y, z, xlabel, ylabel, title){
library(ggalt)
library(ggrepel)  # for annotations
library(viridis)  # for nice colours
library(broom)  # for cleaning up models
# devtools::install_github("wilkox/treemapify")
library(treemapify)  # for making area graphs
library(wesanderson)  # for nice colours
ggplot(data = data,
mapping = aes(x = reorder({{x}}, {{y}}, median_n), y = {{y}}, fill = {{z}})) +
# The half violins
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.8) +
# The points
geom_point(aes(y = {{y}}, color = {{x}}),
position = position_jitter(width = 0.15), size = 1, alpha = 0.1) +
# The boxplots
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.8) +
# \n adds a new line which creates some space between the axis and axis title
labs(x = xlabel, y = ylabel, title = title) +
# Removing legends
guides(fill = FALSE, color = FALSE) +
# Setting the limits of the y axis
#scale_y_continuous(limits = c(0, 1.2)) +
# Picking nicer colours
scale_fill_manual(values = c("#5A4A6F", "#E47250",  "#EBB261", "#9D5A6C", "#FFFF80FF")) +
scale_colour_manual(values = c("#5A4A6F", "#E47250",  "#EBB261", "#9D5A6C", "#FFFF80FF")) +
theme_niwot() + scale_y_log10()
}
hausmann_test <- function(data, depvar){
library(broom)
library(pcse)
library(car)
library(zoo)
library(lmtest)
library(broom)
#################################################
fixed <- plm(depvar ~ age + currentlegalstatus +
legal_tradition +
assets + kkm + pcrdbgdp +
log(stmktcap) + log(profit_margin) +
log(donations_assets_ratio) +
gdp_growth_annual + factor(year),
data = my_data,
effect = "individual",
model = "within",
index = c("mfiid", "year"))
#################################################
random <- plm(depvar ~ age + currentlegalstatus +
legal_tradition +
assets + kkm + pcrdbgdp +
log(stmktcap) + log(profit_margin) +
log(donations_assets_ratio) +
gdp_growth_annual + factor(year),
data = my_data,
effect = "individual",
model = "random",
index = c("mfiid", "year"))
broom::tidy(phtest(fixed, random))
}
## Regression function - fixed, random and pooling ----
modelling <- function(depvar,
effect = c("individual", "twoways", "time", "nested"),
model = c("within", "random", "ht", "between", "pooling", "fd"),
inst.method = c("bvk", "baltagi", "am", "bms"),
random.method = c("swar", "amemiya", "walhus", "nerlove"),
digits = 4, index = c("mfiid", "year")){
## Load libraries
library(plm)
library(broom)
library(pcse)
library(car)
library(zoo)
library(lmtest)
library(broom)
library(stargazer)
## match arguments
effect <- match.arg(effect)
model <- match.arg(model)
inst.method <- match.arg(inst.method)
random.method <- match.arg(random.method)
## Run the Model
plm(depvar ~ age + currentlegalstatus +
legal_tradition +
assets + kkm + pcrdbgdp +
log(stmktcap) + log(profit_margin) +
log(donations_assets_ratio) +
gdp_growth_annual + factor(year),
data = my_data,
effect = effect,
model = model,
inst.method = inst.method,
index = index,
digits = digits)
## Output results
## Correct standard errors for heteroscedasticity
## And cross-sectional dependence
#coeftest(unadjusted, vcov. = function(x) {
#vcovBK(x, method = "arellano", type="HC1", cluster = "group")
#})
}
## Regression function - fixed, random and pooling ----
modelling3 <- function(depvar,
effect = c("individual", "twoways", "time", "nested"),
model = c("within", "random", "ht", "between", "pooling", "fd"),
inst.method = c("bvk", "baltagi", "am", "bms"),
random.method = c("swar", "amemiya", "walhus", "nerlove"),
digits = 4, index = c("mfiid", "year")){
## Load libraries
library(plm)
library(broom)
library(pcse)
library(car)
library(zoo)
library(lmtest)
library(broom)
library(stargazer)
## match arguments
effect <- match.arg(effect)
model <- match.arg(model)
inst.method <- match.arg(inst.method)
random.method <- match.arg(random.method)
## Run the Model
plm(depvar ~ age + currentlegalstatus +
legal_tradition +
assets + kkm + pcrdbgdp +
log(stmktcap) + log(profit_margin) +
log(donations_assets_ratio) +
gdp_growth_annual + factor(year),
data = data3,
effect = effect,
model = model,
inst.method = inst.method,
index = index,
digits = digits)
## Output results
## Correct standard errors for heteroscedasticity
## And cross-sectional dependence
#coeftest(unadjusted, vcov. = function(x) {
#vcovBK(x, method = "arellano", type="HC1", cluster = "group")
#})
}
## Regression function - fixed, random and pooling ----
modelling5 <- function(depvar,
effect = c("individual", "twoways", "time", "nested"),
model = c("within", "random", "ht", "between", "pooling", "fd"),
inst.method = c("bvk", "baltagi", "am", "bms"),
random.method = c("swar", "amemiya", "walhus", "nerlove"),
digits = 4, index = c("mfiid", "year")){
## Load libraries
library(plm)
library(broom)
library(pcse)
library(car)
library(zoo)
library(lmtest)
library(broom)
library(stargazer)
## match arguments
effect <- match.arg(effect)
model <- match.arg(model)
inst.method <- match.arg(inst.method)
random.method <- match.arg(random.method)
## Run the Model
plm(depvar ~ age + currentlegalstatus +
legal_tradition +
assets + kkm + pcrdbgdp +
log(stmktcap) + log(profit_margin) +
log(donations_assets_ratio) +
gdp_growth_annual + factor(year),
data = data5,
effect = effect,
model = model,
inst.method = inst.method,
index = index,
digits = digits)
## Output results
## Correct standard errors for heteroscedasticity
## And cross-sectional dependence
#coeftest(unadjusted, vcov. = function(x) {
#vcovBK(x, method = "arellano", type="HC1", cluster = "group")
#})
}
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.10, .90), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
data_wins_capital_structures <- my_data %>%
select(assets, kkm, pcrdbgdp,
stmktcap, profit_margin,
donations_assets_ratio,
gdp_growth_annual,
capital_asset_ratio,
deposits_to_total_assets)
data_wins <- sapply(data_wins_capital_structures, remove_outliers) %>%
cbind(my_data[,c("mfiid", "year", "age", "currentlegalstatus",
"legal_tradition")]) %>%
na.omit() %>%
relocate(mfiid:legal_tradition)
## Regression function - fixed, random and pooling ----
modelling_wins <- function(depvar,
effect = c("individual", "twoways", "time", "nested"),
model = c("within", "random", "ht", "between", "pooling", "fd"),
inst.method = c("bvk", "baltagi", "am", "bms"),
random.method = c("swar", "amemiya", "walhus", "nerlove"),
digits = 4, index = c("mfiid", "year")){
## Load libraries
library(plm)
library(broom)
library(pcse)
library(car)
library(zoo)
library(lmtest)
library(broom)
library(stargazer)
## match arguments
effect <- match.arg(effect)
model <- match.arg(model)
inst.method <- match.arg(inst.method)
random.method <- match.arg(random.method)
## Run the Model
plm(depvar ~ age + currentlegalstatus +
legal_tradition +
assets + kkm + pcrdbgdp +
log(stmktcap) + log(profit_margin) +
log(donations_assets_ratio) +
gdp_growth_annual + factor(year),
data = data_wins,
effect = effect,
model = model,
inst.method = inst.method,
index = index,
digits = digits)
## Output results
## Correct standard errors for heteroscedasticity
## And cross-sectional dependence
#coeftest(unadjusted, vcov. = function(x) {
#vcovBK(x, method = "arellano", type="HC1", cluster = "group")
#})
}
source('~/Desktop/rcode.R', echo=TRUE)
#####################################
my_data %>%
group_by(my_data$Label) %>%
summarise(max_height = max(height), max_weight = max(weight))
#####################################
my_data %>%
group_by(Label) %>%
summarise(max_height = max(height), max_weight = max(weight))
View(my_data)
#####################################
my_data %>%
mutate(Label = factor(Label)) %>%
group_by(Label) %>%
summarise(max_height = max(height), max_weight = max(weight))
#####################################
my_data %>%
mutate(Label = factor(Label)) %>%
group_by(Label) %>%
summarise(max_height = max(Height), max_weight = max(Weight))
paste("a", "b")
paste("Johannesburg", Sys.Date())
paste("Johannesburg, ", Sys.Date())
